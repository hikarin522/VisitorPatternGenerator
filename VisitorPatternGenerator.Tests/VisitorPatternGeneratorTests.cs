using NUnit.Framework;

namespace VisitorPatternGenerator.Tests;

public sealed class VisitorPatternGeneratorTests: BaseSourceGeneratorTestContainer<VisitorPatternGenerator>
{
    [Test]
    public void SimpleCase()
    {
        var source = """
            using VisitorPatternGenerator;

            namespace SurgicalThing.Tools;

            public struct Unit { }

            public interface ITool
            {
                bool IsAvailable { get; }
                bool IsDisabled { get; set; }
            }

            public abstract class Tool : ITool
            {
                public bool IsDisabled { get; set; }

                public virtual bool IsAvailable => !IsDisabled;
            }

            public interface IConsumableTool : ITool
            {
                double CurrentDurability { get; set; }
                double MaxDurability { get; set; }

                void ResetDurability();
            }

            public abstract class ConsumableTool : Tool, IConsumableTool
            {
                public double CurrentDurability { get; set; }
                public double MaxDurability { get; set; }

                public override bool IsAvailable => CurrentDurability > 0 && base.IsAvailable;

                protected ConsumableTool(double maxDurability)
                {
                    MaxDurability = maxDurability;
                    CurrentDurability = maxDurability;
                }

                public void ResetDurability()
                {
                    CurrentDurability = MaxDurability;
                }
            }

            public partial interface IMedication : IConsumableTool { }

            [Acceptor<IMedication>]
            public abstract partial class Medication : ConsumableTool
            {
                protected Medication(double maxDurability)
                    : base(maxDurability) { }
            }

            public partial interface IGeneralMedication { }

            [Acceptor<IMedication>]
            [Acceptor<IGeneralMedication>]
            public abstract partial class GeneralMedication : Medication
            {
                protected GeneralMedication(double maxDurability)
                    : base(maxDurability) { }
            }
            public partial interface ISpecializedMedication { }

            [Acceptor<IMedication>]
            [Acceptor<ISpecializedMedication>]
            public abstract partial class SpecializedMedication : Medication
            {
                protected SpecializedMedication(double maxDurability)
                    : base(maxDurability) { }
            }

            [Acceptor<IMedication>]
            [Acceptor<IGeneralMedication>]
            public sealed partial class Stabilizer : GeneralMedication
            {
                public Stabilizer(double maxDurability)
                    : base(maxDurability) { }
            }

            // Visitors
            [Visitor<IMedication, Unit>]
            public partial interface IGeneratedMedicationVisitor { }
            [Visitor<IGeneralMedication, Unit>]
            public partial interface IGeneratedGeneralMedicationVisitor { }
            [Visitor<ISpecializedMedication, Unit>]
            public partial interface IGeneratedSpecializedMedicationVisitor { }
            [Visitor<ITool, Unit>]
            public partial interface IGeneratedToolVisitor { }
            """;

        var annotationsTemplate = """
            // <auto-generated/>
            #nullable enable

            namespace VisitorPatternGenerator;

            [System.Flags]
            internal enum AcceptorOptions
            {
                None = 0,
                MessagePackUnion = 0x100,
            }

            [System.Diagnostics.Conditional("VISITOR_PATTERN_GENERATOR_PRESERVE_ANNOTATION")]
            [System.AttributeUsage(System.AttributeTargets.Interface | System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
            internal sealed class AcceptorAttribute: System.Attribute
            {
                public AcceptorOptions Options { get; }

                public AcceptorAttribute(AcceptorOptions options = AcceptorOptions.None) { this.Options = options; }
            }

            [System.Diagnostics.Conditional("VISITOR_PATTERN_GENERATOR_PRESERVE_ANNOTATION")]
            [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
            internal sealed class AcceptorAttribute<TAcceptor>: System.Attribute where TAcceptor : class { }

            [System.Diagnostics.Conditional("VISITOR_PATTERN_GENERATOR_PRESERVE_ANNOTATION")]
            [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
            internal sealed class AcceptorAttribute<TAcceptor, TSelf>: System.Attribute where TAcceptor : class where TSelf : class { }

            [System.Diagnostics.Conditional("VISITOR_PATTERN_GENERATOR_PRESERVE_ANNOTATION")]
            [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
            internal sealed class AcceptorAttribute<TAcceptor, TSelf, TResult>: System.Attribute where TAcceptor : class where TSelf : class { }

            [System.Diagnostics.Conditional("VISITOR_PATTERN_GENERATOR_PRESERVE_ANNOTATION")]
            [System.AttributeUsage(System.AttributeTargets.Interface, AllowMultiple = false, Inherited = false)]
            internal sealed class VisitorAttribute<TAcceptor>: System.Attribute where TAcceptor : class
            {
                public bool VoidReturn { get; }

                public VisitorAttribute(bool voidReturn = false) { this.VoidReturn = voidReturn; }
            }

            [System.Diagnostics.Conditional("VISITOR_PATTERN_GENERATOR_PRESERVE_ANNOTATION")]
            [System.AttributeUsage(System.AttributeTargets.Interface, AllowMultiple = false, Inherited = false)]
            internal sealed class VisitorAttribute<TAcceptor, TResult>: System.Attribute where TAcceptor : class { }

            [System.Diagnostics.Conditional("VISITOR_PATTERN_GENERATOR_PRESERVE_ANNOTATION")]
            [System.AttributeUsage(System.AttributeTargets.Interface, AllowMultiple = false, Inherited = false)]
            internal sealed class TaskVisitorAttribute<TAcceptor>: System.Attribute where TAcceptor : class
            {
                public bool VoidReturn { get; }

                public TaskVisitorAttribute(bool voidReturn = false) { this.VoidReturn = voidReturn; }
            }

            [System.Diagnostics.Conditional("VISITOR_PATTERN_GENERATOR_PRESERVE_ANNOTATION")]
            [System.AttributeUsage(System.AttributeTargets.Interface, AllowMultiple = false, Inherited = false)]
            internal sealed class TaskVisitorAttribute<TAcceptor, TResult>: System.Attribute where TAcceptor : class { }

            [System.Diagnostics.Conditional("VISITOR_PATTERN_GENERATOR_PRESERVE_ANNOTATION")]
            [System.AttributeUsage(System.AttributeTargets.Interface, AllowMultiple = false, Inherited = false)]
            internal sealed class ValueTaskVisitorAttribute<TAcceptor>: System.Attribute where TAcceptor : class
            {
                public bool VoidReturn { get; }

                public ValueTaskVisitorAttribute(bool voidReturn = false) { this.VoidReturn = voidReturn; }
            }

            [System.Diagnostics.Conditional("VISITOR_PATTERN_GENERATOR_PRESERVE_ANNOTATION")]
            [System.AttributeUsage(System.AttributeTargets.Interface, AllowMultiple = false, Inherited = false)]
            internal sealed class ValueTaskVisitorAttribute<TAcceptor, TResult>: System.Attribute where TAcceptor : class { }


            """;

        var generatedMedicineVisitor = """
            // <auto-generated/>

            namespace SurgicalThing.Tools
            {
            partial interface IMedication
            {
                SurgicalThing.Tools.Unit Accept(SurgicalThing.Tools.IGeneratedMedicationVisitor visitor);
            }
            }

            namespace SurgicalThing.Tools
            {
            partial interface IGeneratedMedicationVisitor
            {
                SurgicalThing.Tools.Unit Visit(SurgicalThing.Tools.Medication value);
                SurgicalThing.Tools.Unit Visit(SurgicalThing.Tools.GeneralMedication value);
                SurgicalThing.Tools.Unit Visit(SurgicalThing.Tools.SpecializedMedication value);
                SurgicalThing.Tools.Unit Visit(SurgicalThing.Tools.Stabilizer value);
            }
            }

            namespace SurgicalThing.Tools
            {
            partial class Medication: SurgicalThing.Tools.IMedication
            {
                SurgicalThing.Tools.Unit SurgicalThing.Tools.IMedication.Accept(SurgicalThing.Tools.IGeneratedMedicationVisitor visitor) => visitor.Visit(this);
            }
            }

            namespace SurgicalThing.Tools
            {
            partial class GeneralMedication: SurgicalThing.Tools.IMedication
            {
                SurgicalThing.Tools.Unit SurgicalThing.Tools.IMedication.Accept(SurgicalThing.Tools.IGeneratedMedicationVisitor visitor) => visitor.Visit(this);
            }
            }

            namespace SurgicalThing.Tools
            {
            partial class SpecializedMedication: SurgicalThing.Tools.IMedication
            {
                SurgicalThing.Tools.Unit SurgicalThing.Tools.IMedication.Accept(SurgicalThing.Tools.IGeneratedMedicationVisitor visitor) => visitor.Visit(this);
            }
            }

            namespace SurgicalThing.Tools
            {
            partial class Stabilizer: SurgicalThing.Tools.IMedication
            {
                SurgicalThing.Tools.Unit SurgicalThing.Tools.IMedication.Accept(SurgicalThing.Tools.IGeneratedMedicationVisitor visitor) => visitor.Visit(this);
            }
            }
            
            """;
        var generatedGeneralMedicationVisitor = """
            // <auto-generated/>

            namespace SurgicalThing.Tools
            {
            partial interface IGeneralMedication
            {
                SurgicalThing.Tools.Unit Accept(SurgicalThing.Tools.IGeneratedGeneralMedicationVisitor visitor);
            }
            }

            namespace SurgicalThing.Tools
            {
            partial interface IGeneratedGeneralMedicationVisitor
            {
                SurgicalThing.Tools.Unit Visit(SurgicalThing.Tools.GeneralMedication value);
                SurgicalThing.Tools.Unit Visit(SurgicalThing.Tools.Stabilizer value);
            }
            }

            namespace SurgicalThing.Tools
            {
            partial class GeneralMedication: SurgicalThing.Tools.IGeneralMedication
            {
                SurgicalThing.Tools.Unit SurgicalThing.Tools.IGeneralMedication.Accept(SurgicalThing.Tools.IGeneratedGeneralMedicationVisitor visitor) => visitor.Visit(this);
            }
            }

            namespace SurgicalThing.Tools
            {
            partial class Stabilizer: SurgicalThing.Tools.IGeneralMedication
            {
                SurgicalThing.Tools.Unit SurgicalThing.Tools.IGeneralMedication.Accept(SurgicalThing.Tools.IGeneratedGeneralMedicationVisitor visitor) => visitor.Visit(this);
            }
            }
            
            """;
        var generatedSpecializedMedicationVisitor = """
            // <auto-generated/>

            namespace SurgicalThing.Tools
            {
            partial interface ISpecializedMedication
            {
                SurgicalThing.Tools.Unit Accept(SurgicalThing.Tools.IGeneratedSpecializedMedicationVisitor visitor);
            }
            }

            namespace SurgicalThing.Tools
            {
            partial interface IGeneratedSpecializedMedicationVisitor
            {
                SurgicalThing.Tools.Unit Visit(SurgicalThing.Tools.SpecializedMedication value);
            }
            }

            namespace SurgicalThing.Tools
            {
            partial class SpecializedMedication: SurgicalThing.Tools.ISpecializedMedication
            {
                SurgicalThing.Tools.Unit SurgicalThing.Tools.ISpecializedMedication.Accept(SurgicalThing.Tools.IGeneratedSpecializedMedicationVisitor visitor) => visitor.Visit(this);
            }
            }
            
            """;

        var mappings = new (string fileName, string source)[] {
            ("AnnotationsTemplate.cs", annotationsTemplate),

            ("SurgicalThing.Tools.IGeneratedMedicationVisitor.cs", generatedMedicineVisitor),
            ("SurgicalThing.Tools.IGeneratedGeneralMedicationVisitor.cs", generatedGeneralMedicationVisitor),
            ("SurgicalThing.Tools.IGeneratedSpecializedMedicationVisitor.cs", generatedSpecializedMedicationVisitor),
        };

        this.VerifyAsync(source, mappings, default).Wait();
    }
}
